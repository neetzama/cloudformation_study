AWSTemplateFormatVersion: '2010-09-09'
Description: jenkins-practice
Parameters:
  NamePrefix:
    Type: String
    Description: Name tag prefix
    MinLength: 1
    Default: test
# EC2Parameters
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: payblog
# DBParameters
  DBMasterUsername:
    Type: String
    Default: 'dbuser'
    NoEcho: true
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 'must begin with a letter and contain alphanumeric characters'
  DBPassword:
    Type: String
    Default: 'dbpassword'
    NoEcho: true
    MinLength: 8
    MaxLength: 30
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: 'must contain only alphanumeric characters'

Resources:
# Vpc
  MyVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-vpc"

# SecurityGroup
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${NamePrefix}-ec2-sg"
      GroupDescription: Allow SSH and HTTP to MyVpc
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        # HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # SSH
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-ec2-sg"

# Igw
  MyIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-igw"
  MyIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIgw
      VpcId: !Ref MyVpc

# PublicSubnet
  PublicSubnetAZ1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.10.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-subnet1a"
  PublicSubnetAZ1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.20.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-subnet1c"

# PublicSubnetTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-route"
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIgw
    Properties:
      GatewayId: !Ref MyIgw
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  RouteLocalAZ1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1a
  RouteLocalAZ1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1c

# PrivateSeculityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${NamePrefix}-db-sg"
      GroupDescription: Allow EC2SecurityGroup
      VpcId: !Ref MyVpc
        # Role
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

# PrivateSubnet
  PrivateSubnetAZ1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.30.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-subnet-1a"
  PrivateSubnetAZ1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.40.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-subnet-1c"

# RDSSubnetGroup
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDSSubnetGroup related to PrivateSubnet
      DBSubnetGroupName: !Sub "${NamePrefix}-db-subnet-group"
      SubnetIds:
        - !Ref PrivateSubnetAZ1a
        - !Ref PrivateSubnetAZ1c
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-db-subnet-group"

# RDSInstance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DBSecurityGroup
    Properties:
      DBInstanceIdentifier: !Sub "${NamePrefix}-db"
      Engine: postgres
      EngineVersion: '9.5.19'
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '20'
      BackupRetentionPeriod: 7
      DBName: payblog
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-rds"

# ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "${NamePrefix}-alb"
      IpAddressType: ipv4
      Type: application
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      Subnets:
        - !Ref PublicSubnetAZ1a
        - !Ref PublicSubnetAZ1c
      Tags: 
        - Key: Name
          Value: !Sub "${NamePrefix}-alb"

# ALBTargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${NamePrefix}-alb-target-group"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVpc
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-alb-target-group"
    DependsOn: AutoScalingLaunchConfig

# ALBListener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Port: 80
      Protocol: HTTP

# AutoScaling
  AutoScalingLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "true"
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            SnapshotId: snap-02d42f6490583a302
            VolumeType: gp2
      EbsOptimized: false
      ImageId: ami-0a825d4cb54b2edbe
      InstanceMonitoring: true
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Sub "${NamePrefix}-autoscaling-launchconfig"
      PlacementTenancy: default 
      SecurityGroups:
        - !Ref EC2SecurityGroup

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "${NamePrefix}-autoscaling-group"
      AvailabilityZones:
        - ap-northeast-1a
        - ap-northeast-1c
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 3
      Cooldown: "120"
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AutoScalingLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}_autoscaling_group"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
         - !Ref PublicSubnetAZ1a
         - !Ref PublicSubnetAZ1c
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      TerminationPolicies:
        - NewestInstance

# stepscaling
  AutoScalingUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ExactCapacity
      MetricAggregationType: "Average"
      EstimatedInstanceWarmup: 60
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 3
  
  AutoScalingDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ExactCapacity
      MetricAggregationType: "Average"
      EstimatedInstanceWarmup: 60
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: 1

  LaunchingLifecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      HeartbeatTimeout: 300
      LifecycleHookName: !Sub "${NamePrefix}-launching-lifecycle-hook"
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationMetadata: "Add instance to Auto Scaling"
      NotificationTargetARN: !GetAtt AutoScalingGroupLifecycleHookQueue.Arn
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2AutoScalingNotificationAccess"
    DependsOn: AutoScalingGroupLifecycleHookQueue

# SQS
  AutoScalingGroupLifecycleHookQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${NamePrefix}-lifecyclehook-sqs"
      VisibilityTimeout: 60

# CloudWatch
  InstancesShortageAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "'Average CPU utilization over last 1 minutes higher than 50%'"
      Namespace: "AWS/EC2"
      AlarmName: !Sub "${NamePrefix}-AutoScaling-ScaleOutAlarm"
      AlarmActions:
        - !Ref AutoScalingUpPolicy
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:autoscaling_cloudwatch"
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 60
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup

  InstancesExcessAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Alarm to reduce capacity if CPU is low"
      Namespace: "AWS/EC2"
      AlarmName: !Sub "${NamePrefix}-AutoScaling-ScaleInAlarm"
      AlarmActions:
        - !Ref AutoScalingDownPolicy
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:autoscaling_cloudwatch"
      MetricName: CPUUtilization
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 60
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup